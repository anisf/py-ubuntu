name: "anisf.dockerfiles.python"

on:
  push:
    paths:
      - '**'
jobs:
  main:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        img_purpose:
        - stable
        - devel
        - base
    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_ACCESS_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build python image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: false
          context: ${{ matrix.img_purpose }}
          file: ./${{ matrix.img_purpose }}/Dockerfile
          tags: anisfathallah/py-ubuntu:${{ matrix.img_purpose }}
          load: true

      - name: Test builded image
        id: docker_run
        uses: addnab/docker-run-action@v1
        with:
          image: anisfathallah/py-ubuntu:${{ matrix.img_purpose }}
          options: -v ${{github.workspace}}:/workspace
          run: |
            id
            cd /workspace
            python -V
            pip -V
            echo "::set-output name=python_version::$(python3 -c "print(__import__('platform').python_version())")"
            echo "::set-output name=pip_version::$(python3 -c "print(__import__('pkg_resources').get_distribution('pip').version)")"

      - name: Build python image
        id: docker_push
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ${{ matrix.img_purpose }}
          file: ./${{ matrix.img_purpose }}/Dockerfile
          tags: anisfathallah/py-ubuntu:${{ matrix.img_purpose }}, anisfathallah/py-ubuntu:${{ matrix.img_purpose }}-${{ github.ref }}
          labels: python_version:${{ steps.run_tests.outputs.python_version }}, pip_version:${{ steps.run_tests.outputs.pip_version }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'anisfathallah/py-ubuntu:${{ matrix.img_purpose }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'